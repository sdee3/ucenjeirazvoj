const mix = require("laravel-mix");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

mix.webpackConfig({
  plugins: [new MiniCssExtractPlugin()],
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [MiniCssExtractPlugin.loader, "css-loader"],
      },
      {
        test: /\.scss$/,
        use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
      },
    ],
  },
});

// try to remove traces of "extract-text-webpack-plugin"
// inside the webpack config generated by laravel-mix
mix.override((config) => {
  // STEP 1 : remove related plugins
  const cleanedPlugins = [];

  for (let i in config.plugins) {
    const plugin = config.plugins[i];
    if (plugin.constructor.name !== "ExtractTextPlugin") {
      cleanedPlugins.push(plugin);
    }
  }
  config.plugins = cleanedPlugins;

  // STEP 2 : remove style related rules
  const cleanedRules = [];

  for (let i in config.module.rules) {
    const rule = config.module.rules[i];

    if (!rule.loaders || !rule.loaders.includes("style-loader")) {
      cleanedRules.push(rule);
    }
  }
  config.module.rules = cleanedRules;
});

mix.disableNotifications();

mix.js("resources/js/loadStyles.js", "public/js");

mix
  .react("resources/js/app-server.js", "public/js")
  .react("resources/js/app-client.js", "public/js")
  .babelConfig({
    presets: ["@babel/preset-env"],
    plugins: [
      "@babel/plugin-syntax-dynamic-import",
      "@babel/plugin-proposal-class-properties",
    ],
  })
  .sourceMaps()
  .version();

mix.webpackConfig({
  output: {
    filename: "[name].js",
    chunkFilename: "js/chunks/[name].js",
  },
});
